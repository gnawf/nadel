---
name: extending types via hydration returning a connection
query: |-
  query {
    synth {
      issue {
        association(filter: {name : "value"}) {
          nodes {
            page {
              id
            }
          }
        }
      }
    }
  }
services:
  Issue: |
    schema {
      query: Query
    }

    type Issue {
      id: ID
    }

    type Query {
      synth: Synth
    }

    type Synth {
      issue: Issue
    }
  Association: |
    schema {
      query: Query
    }

    type Association {
      id: ID
      nameOfAssociation: String
      pageId: ID
    }

    type AssociationConnection {
      nodes: [Association]
    }

    type Page {
      id: ID
    }

    type Pages {
      page(id: ID): Page
    }

    type Query {
      association(filter: Filter, id: ID): AssociationConnection
      pages: Pages
    }

    input Filter {
      name: String
    }
ndsls:
  Issue: |-
    service Issue {
        type Query {
            synth: Synth
        }
        type Synth {
            issue: Issue
        }
        type Issue  {
            id: ID
        }
    }
  Association: |-
    service Association {
        type Query {
            association(id: ID, filter: Filter): AssociationConnection
        }
        type AssociationConnection {
            nodes: [Association]
        }
        input Filter  {
            name: String
        }
        type Association {
            id: ID
            nameOfAssociation: String
            page: Page => hydrated from Association.pages.page(id: $source.pageId)
        }
        type Page {
            id: ID
        }
        extend type Issue {
            association(filter:Filter): AssociationConnection => hydrated from Association.association(id: $source.id, filter: $argument.filter)
        }
    }
schema: |-
  schema {
    query: Query
  }

  type Association {
    pageId: ID @omitted
    id: ID
    nameOfAssociation: String
    page: Page @hydrated(from: ["pages", "page"] arguments: [{name: "id" valueFromField: ["pageId"]}] objectId: "id")
  }

  type AssociationConnection {
    nodes: [Association]
  }

  type Issue {
    id: ID @omitted
    association(filter: Filter): AssociationConnection @hydrated(from: ["association"] arguments: [{name: "id" valueFromField: ["id"]} {name: "filter" valueFromArg: "filter"}] objectId: "id")
    id: ID
  }

  type Page {
    id: ID
  }

  type Query {
    association(filter: Filter, id: ID): AssociationConnection
    synth: Synth
  }

  type Synth {
    issue: Issue
  }

  input Filter {
    name: String
  }
underlyingQueries:
  call-0: |-
    query nadel_2_Association {
      association(id: "ISSUE-1", filter: {name : "value"}) {
        nodes {
          pageId
        }
      }
    }
  call-2: |-
    query nadel_2_Association {
      pages {
        page(id: "1") {
          id
        }
      }
    }
  call-1: |-
    query nadel_2_Issue {
      synth {
        issue {
          id
        }
      }
    }
underlyingResults:
  call-0: |-
    {
      "errors" : [ ],
      "data" : {
        "synth" : {
          "issue" : {
            "id" : "ISSUE-1"
          }
        }
      },
      "extensions" : { }
    }
  call-2: |-
    {
      "errors" : [ ],
      "data" : {
        "pages" : {
          "page" : {
            "id" : "1"
          }
        }
      },
      "extensions" : { }
    }
  call-1: |-
    {
      "errors" : [ ],
      "data" : {
        "association" : {
          "nodes" : [
            {
              "pageId" : "1"
            }
          ]
        }
      },
      "extensions" : { }
    }
response: |-
  {
    "data" : {
      "synth" : {
        "issue" : {
          "association" : {
            "nodes" : [
              {
                "page" : {
                  "id" : "1"
                }
              }
            ]
          }
        }
      }
    },
    "extensions" : { }
  }
